/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DealerRole;


import Business.Organization.DealerOrganization;
import Business.EcoSystem;
import Business.Organization.Organization;
import Business.Organization.ShippingUnitOrganization;
import Business.Product.Product;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerWorkOrder;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import userinterface.ManufacturerAdminRole.CreateManufacturerProductsJPanel;

/**
 *
 * @author Arthi
 */
public class DealerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;

    private UserAccount userAccount;
    EcoSystem ecosystem;
    DealerOrganization dealer;
    private DefaultTableModel viewTable;
    
    private static final Object[] columnNames = {"Product Name", "Price", "Category", "Quantity", "Product Image"};
    /**
     * Creates new form DealerWorkAreaJPanel
     */
    public DealerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, DealerOrganization deal) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
      
        this.userAccount = account;
        this.ecosystem = system;
        this.dealer = deal;
        
        valueLabel.setText(this.dealer.getName());
        totalRevenue.setText("$" + EcoSystem.round(this.dealer.getRevenue(), 2));
        
        populateRequestTable();
        populateDealerWorkOrders();
        populateShippingCompanies();
    }
    
    public void populateRequestTable(){
        viewTable =  new DefaultTableModel(null,columnNames){
          @Override
          public Class<?> getColumnClass(int column) {
              if (column==4) return Icon.class;
              return Object.class;
           }
        };
        
        viewTable.setRowCount(0);
        
        for (Product p : this.dealer.getProductDirectory().getProducts()) {
            Object row[] = new Object[5];
            row[0] = p;
            row[1] = p.getPrice();
            row[2] = p.getCategory();
            row[3] = p.getQty();

            String temp = p.getProductImagePath();
            if(temp != null)
            {
                ImageIcon ii = new ImageIcon(temp);
                Image resizedImage = ii.getImage();
                ii = new ImageIcon(resizedImage.getScaledInstance(60, 60, Image.SCALE_SMOOTH));
                row[4] = ii;
            }
            else
            {    
                row[4] = "No image";
            }
            
            viewTable.addRow(row); 
        }
        
        productsJTable.setRowHeight(80);
        productsJTable.setModel(viewTable);
    }
    
    public void populateDealerWorkOrders(){
        DefaultTableModel model = (DefaultTableModel)tblDealerOrders.getModel();
        model.setRowCount(0);

        for (WorkRequest wr : this.dealer.getWorkQueue().getWorkRequestList()) {
            CustomerWorkOrder cwo = (CustomerWorkOrder) wr;
            Object row[] = new Object[5];
            row[0] = cwo;
            row[1] = cwo.getRequestDate();
            row[2] = cwo.getStatus();
            row[3] = (cwo.getShippingAssigned() != null) ? cwo.getShippingAssigned() : "Not Assigned";
            row[4] = cwo.getResolveDate();
            model.addRow(row); 
        }
    }
    
    public void populateShippingCompanies() {
        DefaultTableModel model = (DefaultTableModel)tblShippingCompanies.getModel();
        model.setRowCount(0);

        for (Organization org :  this.ecosystem.getShippingCompanies().getOrganizationList()) {
            Object row[] = new Object[tblShippingCompanies.getColumnCount()];
            ShippingUnitOrganization shippingCompany = (ShippingUnitOrganization) org;
            row[0] = shippingCompany;
            model.addRow(row); 
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDealerOrders = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblShippingCompanies = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jBtnAssignShipping = new javax.swing.JButton();
        enterpriseLabel1 = new javax.swing.JLabel();
        totalRevenue = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        productsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Category", "Quantity", "Product Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(290, 80, 742, 249);

        requestTestJButton.setText("Add Product to Inventory");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton);
        requestTestJButton.setBounds(560, 350, 180, 23);

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton);
        refreshTestJButton.setBounds(940, 50, 90, 23);

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Dealer");
        add(enterpriseLabel);
        enterpriseLabel.setBounds(300, 40, 127, 30);

        valueLabel.setText("<value>");
        add(valueLabel);
        valueLabel.setBounds(450, 40, 232, 26);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Dealer - Shipping Management of assigned orders");
        add(jLabel1);
        jLabel1.setBounds(400, 400, 465, 30);

        tblDealerOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecommerce/Auction Product", "Request Date", "Status", "Shipping Company", "Resolved Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDealerOrders);

        add(jScrollPane2);
        jScrollPane2.setBounds(290, 470, 617, 153);

        tblShippingCompanies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Shipping Company"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblShippingCompanies);

        add(jScrollPane3);
        jScrollPane3.setBounds(940, 470, 242, 106);

        jLabel2.setText("Choose a Shipping company to assign to an order");
        add(jLabel2);
        jLabel2.setBounds(940, 440, 237, 19);

        jLabel3.setText("Choose and order placed under this Dealer's products - Assign Shipping");
        add(jLabel3);
        jLabel3.setBounds(300, 440, 446, 19);

        jBtnAssignShipping.setText("Assign Shipping");
        jBtnAssignShipping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAssignShippingActionPerformed(evt);
            }
        });
        add(jBtnAssignShipping);
        jBtnAssignShipping.setBounds(985, 844, 246, 23);

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("Total Revenue:");
        add(enterpriseLabel1);
        enterpriseLabel1.setBounds(1037, 11, 151, 30);

        totalRevenue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        add(totalRevenue);
        totalRevenue.setBounds(1198, 11, 151, 30);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Capture6_120x120.png"))); // NOI18N
        add(jLabel4);
        jLabel4.setBounds(0, 0, 120, 120);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dealer1_760x480.png"))); // NOI18N
        add(jLabel5);
        jLabel5.setBounds(410, 180, 760, 480);
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        if (userAccount.getUsername().equalsIgnoreCase("ThriftStoreManufacturer")){
            CreateManufacturerProductsJPanel cmpjp = new CreateManufacturerProductsJPanel(userProcessContainer, dealer, ecosystem);
            userProcessContainer.add("CreateManufacturerProductsJPanel", cmpjp);
            CardLayout layout = (CardLayout)this.userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }else{
            ManageDealerProductsJPanel mdpj = new ManageDealerProductsJPanel(userProcessContainer, this.dealer, this.ecosystem);
            userProcessContainer.add("ManageDealerProducts", mdpj);
            CardLayout layout = (CardLayout)this.userProcessContainer.getLayout();
            layout.next(userProcessContainer); 
        }
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void jBtnAssignShippingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAssignShippingActionPerformed
        int selectedOrderRow = tblDealerOrders.getSelectedRow();
        int selectedShipperRow = tblShippingCompanies.getSelectedRow();

        if (selectedOrderRow >= 0 && selectedShipperRow >=0 ) {
            CustomerWorkOrder selectedOrder = (CustomerWorkOrder) tblDealerOrders.getValueAt(selectedOrderRow, 0);
            ShippingUnitOrganization selectedShipping = (ShippingUnitOrganization) tblShippingCompanies.getValueAt(selectedShipperRow, 0);

            //Delete the existing shipping company's order first
            if (selectedOrder.getShippingAssigned() != null)
            selectedOrder.getShippingAssigned().getWorkQueue().getWorkRequestList().remove(selectedOrder);

            //Assign Shipping to Order, Add order under Shipping, Update Work Order status - "To Be Shipped"
            selectedOrder.setShippingAssigned(selectedShipping);
            selectedShipping.getWorkQueue().addWorkRequest(selectedOrder);
            selectedOrder.setStatus("To Be Shipped");

            JOptionPane.showMessageDialog(null, "Added Shipping Company for the chosen order!!!");

            populateDealerWorkOrders();
        } else {
            JOptionPane.showMessageDialog(null,"Please select an Order and a Shipping company", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jBtnAssignShippingActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JButton jBtnAssignShipping;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable productsJTable;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable tblDealerOrders;
    private javax.swing.JTable tblShippingCompanies;
    private javax.swing.JLabel totalRevenue;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
