/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DealerRole;

import Business.Organization.DealerOrganization;
import Business.Dealer.DealerCart;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Organization.Organization;
import Business.Product.Product;
import Business.Product.ProductDirectory;
import Business.Role.AdminRole;
import Business.Role.SystemAdminRole;
import Business.UserAccount.UserAccount;
import Business.Organization.WholeSaleSupplierOrganization;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arthishravan
 */
public class ManageDealerProductsJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    DealerOrganization dealer;
    EcoSystem ecosystem;
    ArrayList<DealerCart> cart;
    /**
     * Creates new form CreateResaurantJPanel
     */
    public ManageDealerProductsJPanel(JPanel upc, DealerOrganization deal, EcoSystem system) {
        this.userProcessContainer = upc;
        this.dealer = deal;
        this.ecosystem = system;
        this.cart = new ArrayList<DealerCart>();
        initComponents();
        
        valueLabel.setText(this.dealer.getName());
        populateSupplierTable();
    }
    
    public void populateSupplierTable(){
    DefaultTableModel model = (DefaultTableModel)tblManageDealerSupplier.getModel();
    model.setRowCount(0);

        for (Organization org : this.ecosystem.getWholeSaleSupplierDir().getOrganizationList()) {
            WholeSaleSupplierOrganization sup = (WholeSaleSupplierOrganization) org;
            
            Object row[] = new Object[2];
            row[0] = sup.getId();
            row[1] = sup;
            model.addRow(row); 
        }
    }
    
    public void populateSupplierProductsTable(WholeSaleSupplierOrganization wss){
        DefaultTableModel model = (DefaultTableModel)tblManageSupProducts.getModel();
        model.setRowCount(0);

        for (Product p : wss.getProductDirectory().getProducts()) {
            Object row[] = new Object[3];
            row[0] = p;
            row[1] = p.getPrice();
            row[2] = p.getQty();
            model.addRow(row); 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblManageDealerSupplier = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblManageSupProducts = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDealerCart = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        requestTestJButton = new javax.swing.JButton();
        jTextFieldUnitsCount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Dealer");
        add(enterpriseLabel);
        enterpriseLabel.setBounds(180, 20, 120, 30);

        valueLabel.setText("<value>");
        add(valueLabel);
        valueLabel.setBounds(340, 30, 210, 14);

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton);
        backJButton.setBounds(182, 70, 71, 23);

        tblManageDealerSupplier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Whole sale Dealer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblManageDealerSupplier);
        if (tblManageDealerSupplier.getColumnModel().getColumnCount() > 0) {
            tblManageDealerSupplier.getColumnModel().getColumn(0).setHeaderValue("ID");
        }

        add(jScrollPane2);
        jScrollPane2.setBounds(180, 130, 360, 110);

        jLabel2.setText("Choose a Whole Sale Dealer's inventory");
        add(jLabel2);
        jLabel2.setBounds(180, 110, 300, 14);

        jButton1.setText("View Products");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(320, 260, 120, 23);

        jLabel3.setText("Products");
        add(jLabel3);
        jLabel3.setBounds(180, 290, 110, 20);

        tblManageSupProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price per Unit", "No. of Units"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblManageSupProducts);

        add(jScrollPane4);
        jScrollPane4.setBounds(180, 330, 428, 140);

        jButton3.setText("Add to Cart");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(520, 510, 89, 23);

        tblDealerCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "# of Units"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblDealerCart);

        add(jScrollPane3);
        jScrollPane3.setBounds(670, 330, 342, 140);

        jLabel4.setText("My Cart");
        add(jLabel4);
        jLabel4.setBounds(670, 290, 110, 20);

        jLabel5.setText("Total: $");
        add(jLabel5);
        jLabel5.setBounds(670, 480, 140, 20);

        jButton2.setText("Remove Item");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(790, 510, 120, 23);

        requestTestJButton.setText("Add to Inventory");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton);
        requestTestJButton.setBounds(350, 570, 284, 23);
        add(jTextFieldUnitsCount);
        jTextFieldUnitsCount.setBounds(330, 510, 164, 20);

        jLabel6.setText("# of Units to buy*");
        add(jLabel6);
        jLabel6.setBounds(180, 510, 143, 14);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Capture5.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(180, 140, 716, 454);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/finding-suppliers_120x120.jpg"))); // NOI18N
        add(jLabel7);
        jLabel7.setBounds(0, 0, 120, 120);
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DealerWorkAreaJPanel dwajp = (DealerWorkAreaJPanel) component;
        dwajp.populateRequestTable();
        dwajp.populateDealerWorkOrders();
        dwajp.populateShippingCompanies();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblManageDealerSupplier.getSelectedRow();

        if (selectedRow >= 0){
            WholeSaleSupplierOrganization wholeSaleSupplierSelected = (WholeSaleSupplierOrganization) tblManageDealerSupplier.getValueAt(selectedRow, 1);
            populateSupplierProductsTable(wholeSaleSupplierSelected);
        } else {
            JOptionPane.showMessageDialog(null,"Please select a Whole Sale Dealer", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedProdRow = tblManageSupProducts.getSelectedRow();
        int selectedSupRow = tblManageDealerSupplier.getSelectedRow();
        
        String qtyText = jTextFieldUnitsCount.getText().trim();
        

        if (selectedProdRow >= 0 && selectedSupRow >=0 && !qtyText.isEmpty()){
            Product selectedProduct = (Product) tblManageSupProducts.getValueAt(selectedProdRow, 0);
            WholeSaleSupplierOrganization selectedSupplier = (WholeSaleSupplierOrganization) tblManageDealerSupplier.getValueAt(selectedSupRow, 1);
            
            //Check if Cart already has the order - product
            boolean foundCartItem = false;
            DealerCart foundCart = null;
            
            for (DealerCart dc : this.cart) {
                if (dc.getName().equals(selectedProduct.getName())) {
                    foundCartItem = true;
                    foundCart = dc;
                    break;
                }
            }
            // Found logic end.
            
            if (foundCartItem) { //Make sure to create one inventory of products and not add them over and over again.
                foundCart.setQty(foundCart.getQty() + Integer.parseInt(qtyText));
            } else {
                DealerCart cartItem = new DealerCart (selectedProduct.getName(), selectedProduct.getPrice(), Integer.parseInt(qtyText), selectedProduct.getCategory(), selectedProduct.getProductImagePath(), selectedProduct.getSupplier());
                this.cart.add(cartItem);
            }
            
            //Update Supplier's inventory count - Start
            //Find Supplier's product record first
            Product supProduct = selectedSupplier.getProductDirectory().findProduct(selectedProduct.getName());
            supProduct.setQty(supProduct.getQty() - Integer.parseInt(qtyText));
            //Update Supplier's inventory count - end

            populateCartTable();
            populateSupplierProductsTable(selectedSupplier);
        } else {
            JOptionPane.showMessageDialog(null,"Please select a Product and # of units to add to the Cart", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
    public void populateCartTable() {
        DefaultTableModel model = (DefaultTableModel)tblDealerCart.getModel();
        double totalPrice = 0;

        model.setRowCount(0);
        //int count = 1;
        //Supplier supplier = (Supplier)suppComboBox1.getSelectedItem();
        if (cart != null) {
            for(DealerCart c : cart) {
                Object row[] = new Object[3];
                row[0] = c;
                row[1] = c.getPrice();
                row[2] = c.getQty();
                totalPrice = totalPrice + (c.getPrice() * c.getQty()); //Total Price per cart Item Calc
                model.addRow(row); 
                //count++;
            }       
        }

        jLabel5.setText("Total Price: $" + EcoSystem.round(totalPrice,2));
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedCartRow = tblDealerCart.getSelectedRow();
        int selectedSupRow = tblManageDealerSupplier.getSelectedRow();

        if (selectedCartRow >= 0 && selectedSupRow>=0){
            DealerCart cartItem = (DealerCart) tblDealerCart.getValueAt(selectedCartRow, 0);
            WholeSaleSupplierOrganization selectedSupplier = (WholeSaleSupplierOrganization) tblManageDealerSupplier.getValueAt(selectedSupRow, 1);

            this.cart.remove(cartItem);
            
            //Update Supplier's inventory count - Start
            //Find Supplier's product record first
            Product supProduct = selectedSupplier.getProductDirectory().findProduct(cartItem.getName());
            supProduct.setQty(supProduct.getQty() + cartItem.getQty());
            //Update Supplier's inventory count - end
            
            populateCartTable();
            populateSupplierProductsTable(selectedSupplier);
        } else {
            JOptionPane.showMessageDialog(null,"Please select an item from Cart to remove", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        int selectedRow = tblManageDealerSupplier.getSelectedRow();

        if (selectedRow >= 0){
            WholeSaleSupplierOrganization supplier = (WholeSaleSupplierOrganization) tblManageDealerSupplier.getValueAt(selectedRow, 1);
        } else {
            JOptionPane.showMessageDialog(null,"Please select a Supplier to proceed saving...", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ProductDirectory dealerPd = this.dealer.getProductDirectory();
        ProductDirectory globalPd = this.ecosystem.getProductDirectory();
        

        //Logic for new Products alone.
        for(DealerCart c : cart) {
            Product dealerProduct = new Product();
            Product globalDirectoryProduct = new Product(); //Make sure to have another Copy.. this helps during separate update process
            double profitPrice = EcoSystem.round(c.getPrice() + (c.getPrice() * .1), 2);
            
            dealerProduct.setDealer(this.dealer);
            dealerProduct.setName(c.getName());
            dealerProduct.setPrice(profitPrice); //Dealers sell at 10% profit
            dealerProduct.setQty(c.getQty());
            dealerProduct.setCategory(c.getCategory());
            dealerProduct.setProductImagePath(c.getProductImagePath());
            
            //Update Global Product directory with same params
            globalDirectoryProduct.setDealer(this.dealer);
            globalDirectoryProduct.setName(c.getName());
            globalDirectoryProduct.setPrice(profitPrice); //Dealers sell at 10% profit
            globalDirectoryProduct.setQty(c.getQty());
            globalDirectoryProduct.setCategory(c.getCategory());
            globalDirectoryProduct.setProductImagePath(c.getProductImagePath());
            
            addProductToDirectory(dealerProduct, dealerPd);
            addProductToDirectory(globalDirectoryProduct, globalPd);
            
            //Update Supplier Revenue
            c.getSupplier().setRevenue(c.getSupplier().getRevenue() + (c.getPrice() * c.getQty()));
        }

        JOptionPane.showMessageDialog(null, "Added Products to Dealer Inventory successfully !!!");

        //Populate previous screen table and navigate back.
        userProcessContainer.remove(this);
        CardLayout cardlayout = (CardLayout) userProcessContainer.getLayout();

        //        Restore prev screen's state
        Component[] comps = userProcessContainer.getComponents();

        for (Component comp : comps){
            if (comp instanceof DealerWorkAreaJPanel){
                System.out.println(comp);
                DealerWorkAreaJPanel manageP = (DealerWorkAreaJPanel) comp;
                manageP.populateRequestTable();
            }
        }

        cardlayout.previous(userProcessContainer);
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    
    private void addProductToDirectory(Product product, ProductDirectory productDirectory) { //Check if product already exists, if so add the qty alone and if not, create the product itself
        Product foundProduct = productDirectory.findProductBasedOnDealer(product.getName(), product.getDealer().getName());
        
        if (foundProduct != null) {
            foundProduct.setQty(foundProduct.getQty() + product.getQty());
        } else {
            productDirectory.getProducts().add(product);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextFieldUnitsCount;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable tblDealerCart;
    private javax.swing.JTable tblManageDealerSupplier;
    private javax.swing.JTable tblManageSupProducts;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
