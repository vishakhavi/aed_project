/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.BookFlightPanel;


import Business.AirlinerDirectory;
import Business.Flight;
import Business.MasterSchedule;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vishakha
 */
public class BookFlightPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private MasterSchedule flightSchList;
    
    private ArrayList<Flight> tempFlightDirectory;
    private Flight flightDirectory;
    private AirlinerDirectory airlineDirectory;
    private ArrayList<String> temp = new ArrayList<String>();
    private ArrayList<LocalDate> tempDate = new ArrayList<LocalDate>();
    private ArrayList<LocalDateTime> tempTime = new ArrayList<LocalDateTime>();

    public BookFlightPanel(JPanel UserProcessContainer, MasterSchedule flightSchList, Flight flightDirectory, AirlinerDirectory airlineDirectory) {
        initComponents();
        this.userProcessContainer = UserProcessContainer;
        this.flightSchList = flightSchList;
        this.flightDirectory = flightDirectory;
        this.airlineDirectory = airlineDirectory;
        populateTable();
        populateDropdown();
    }
    
        public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblAllFlights.getModel();
        dtm.setRowCount(0);
        for(Flight flight: flightSchList.getFlightDirectory()){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]= flight;
            row[1]= flight.getAirline();
            row[2]= flight.getFromLocation();
            row[3]= flight.getToLocation();
            row[4]= flight.getPrice();
            row[5]= flight.getDateOfFlight();
            row[6]= flight.getTimeOfFlight();
            row[7]= flight.getAvailSeats();
            
            dtm.addRow(row);
        }
    }
        
    
    private void populateDropdown(){
        
        fromComboBox.removeAllItems();
        toComboBox.removeAllItems();
        DOFComboBox.removeAllItems();
        fromComboBox.addItem("Select from");
        toComboBox.addItem("Select To");
        DOFComboBox.addItem("Select Date");
         
        //From HashSet
        temp.clear();
        for(Flight flight: flightSchList.getFlightDirectory()){
           temp.add(flight.getFromLocation());
        }
        HashSet<String> fromList = new HashSet(temp);
        Iterator<String> from = fromList.iterator();
        while(from.hasNext()){
           fromComboBox.addItem(from.next());
        }
        
        //To Hashset
        temp.clear();
        for(Flight flight: flightSchList.getFlightDirectory()){
           temp.add(flight.getToLocation());
        }
        HashSet<String> toList = new HashSet(temp);
        Iterator<String> to = toList.iterator();
        while(to.hasNext()){
           toComboBox.addItem(to.next());
        }
        
        //DOF
        for(Flight flight: flightSchList.getFlightDirectory()){
           DOFComboBox.addItem((flight.getDateOfFlight()).toString());
        }
      

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fromComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        toComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        DOFComboBox = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllFlights = new javax.swing.JTable();
        ResetBtn = new javax.swing.JButton();
        chkEarliestFlightOrder = new javax.swing.JCheckBox();
        chkCheapestFlightOrder = new javax.swing.JCheckBox();
        btnBookNow = new javax.swing.JButton();

        jLabel1.setText("To");

        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("From");

        toComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Date of Flight");

        DOFComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchBtn.setText("SEARCH");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("< BACK");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel5.setText("BOOK FLIGHT");

        tblAllFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Flight Number", "Airline", "From", "To", "Price", "Date Of Flight", "Time Of Flight", "Available seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAllFlights);

        ResetBtn.setText("Reset");
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });

        chkEarliestFlightOrder.setText("Earliest Flight");
        chkEarliestFlightOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEarliestFlightOrderActionPerformed(evt);
            }
        });

        chkCheapestFlightOrder.setText("Cheapest Flight");
        chkCheapestFlightOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCheapestFlightOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkCheapestFlightOrder)
                        .addGap(30, 30, 30)
                        .addComponent(chkEarliestFlightOrder)
                        .addGap(18, 18, 18)
                        .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResetBtn)
                    .addComponent(chkEarliestFlightOrder)
                    .addComponent(chkCheapestFlightOrder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnBookNow.setText("BOOK NOW");
        btnBookNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookNowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(BackBtn)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DOFComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(btnBookNow, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(BackBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(DOFComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBookNow, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String from = "";
        if((((String)fromComboBox.getSelectedItem()).equals("Select from")))
        {
            from = " ";
        }  
        else
        {
            from = (String)fromComboBox.getSelectedItem();
        }
        String to  = "";
        if((((String)toComboBox.getSelectedItem()).equals("Select To")))
        {
            to = " ";
        }
        else
        {
            to = (String)toComboBox.getSelectedItem();
        }
        
        String date = "";
            date = (String)DOFComboBox.getSelectedItem();
        
        if ((from.equals(" ")) || (to.equals(" ")) || (date.equals("")))
        { 
            JOptionPane.showMessageDialog(null,"Please select from and to and date to search", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            if (from.equals(to)){
                JOptionPane.showMessageDialog(null,"From and To cannot be the same", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else{
                tempFlightDirectory = flightSchList.searchFlight(from, to, date);
                populateTableWithFilter();
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
        // TODO add your handling code here:
           populateTable();
           populateDropdown();
           chkCheapestFlightOrder.setSelected(false);
           chkEarliestFlightOrder.setSelected(false);
    }//GEN-LAST:event_ResetBtnActionPerformed

    private void btnBookNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookNowActionPerformed
        // TODO add your handling code here:
                int selection = tblAllFlights.getSelectedRow();
        
        if(selection >=0 )
        {
            Flight flight = (Flight) tblAllFlights.getValueAt(selection, 0);
           /* CustomerPagePanel amPanel = new CustomerPagePanel(userProcessContainer,flight);
            userProcessContainer.add("CustomerPagePanel", amPanel);
            CardLayout layout = (CardLayout)this.userProcessContainer.getLayout();
            layout.next(userProcessContainer);*/
            
        }
        else{
            JOptionPane.showMessageDialog(null,"Select flight to be booked","Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnBookNowActionPerformed

    private void chkCheapestFlightOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCheapestFlightOrderActionPerformed
        // TODO add your handling code here:
         ArrayList<Flight> list = flightSchList.getFlightDirectory();
           if(chkEarliestFlightOrder.isSelected()&& chkCheapestFlightOrder.isSelected()){
              JOptionPane.showMessageDialog(null,"Please Only one filter", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (chkCheapestFlightOrder.isSelected()){     
         
         Flight temp;
        if (list.size()>1) // check if the number of orders is larger than 1
        {
            for (int x=0; x<list.size(); x++) // bubble sort outer loop
            {
                for (int i=0; i < list.size()-1; i++) {
                    if (list.get(i).getPrice()>list.get(i+1).getPrice())
                    {
                        temp = list.get(i);
                        list.set(i,list.get(i+1) );
                        list.set(i+1, temp);
                    }
                }
            }
        }
            
        }
        populateTableWithFilter1(list);
           }
    }//GEN-LAST:event_chkCheapestFlightOrderActionPerformed

    private void chkEarliestFlightOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEarliestFlightOrderActionPerformed
        // TODO add your handling code here:
         ArrayList<Flight> list = flightSchList.getFlightDirectory();
        if(chkEarliestFlightOrder.isSelected()&& chkCheapestFlightOrder.isSelected()){
              JOptionPane.showMessageDialog(null,"Please Only one filter", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (chkEarliestFlightOrder.isSelected()){
        Flight temp;
        if (list.size()>1) // check if the number of orders is larger than 1
        {
            for (int x=0; x<list.size(); x++) // bubble sort outer loop
            {
                for (int i=0; i < list.size()-1; i++) {
                    if (list.get(i).getTimeOfFlight().isAfter(list.get(i+1).getTimeOfFlight()))
                    {
                        temp = list.get(i);
                       list.set(i,list.get(i+1) );
                        list.set(i+1, temp);
                    }
                }
            }
        }
        }
        }
        populateTableWithFilter1(list);
    }//GEN-LAST:event_chkEarliestFlightOrderActionPerformed

                                             
        
    public void populateTableWithFilter() {
         DefaultTableModel dtm = (DefaultTableModel) tblAllFlights.getModel();
         dtm.setRowCount(0);
         Object row [] = new Object[8];
         for (Flight flight: flightSchList.getFlightDirectory(tempFlightDirectory)){
             
            row[0]= flight;
            row[1]= flight.getAirline();
            row[2]= flight.getFromLocation();
            row[3]= flight.getToLocation();
            row[4]= flight.getPrice();
            row[5]= flight.getDateOfFlight();
            row[6]= flight.getTimeOfFlight();
            row[7]= flight.getAvailSeats();
            
            dtm.addRow(row);
         }
     }
        
    public void populateTableWithFilter1(ArrayList<Flight> tempdir) {
         DefaultTableModel dtm = (DefaultTableModel) tblAllFlights.getModel();
         dtm.setRowCount(0);
         Object row [] = new Object[8];
         for (Flight flight: tempdir){
             
            row[0]= flight;
            row[1]= flight.getAirline();
            row[2]= flight.getFromLocation();
            row[3]= flight.getToLocation();
            row[4]= flight.getPrice();
            row[5]= flight.getDateOfFlight();
            row[6]= flight.getTimeOfFlight();
            row[7]= flight.getAvailSeats();
            
            dtm.addRow(row);
         }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JComboBox<String> DOFComboBox;
    private javax.swing.JButton ResetBtn;
    private javax.swing.JButton btnBookNow;
    private javax.swing.JCheckBox chkCheapestFlightOrder;
    private javax.swing.JCheckBox chkEarliestFlightOrder;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable tblAllFlights;
    private javax.swing.JComboBox<String> toComboBox;
    // End of variables declaration//GEN-END:variables
}
